# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

c = BuildmasterConfig = {}

####### WORKERS

c['workers'] = [worker.Worker("local-worker", "secret")]
c['protocols'] = {'pb': {'port': "tcp:9989:interface=127.0.0.1"}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'https://github.com/system-transparency/system-transparency.git',
    workdir='gitpoller-workdir', branch='master', project='st',
    pollInterval=60))
c['change_source'].append(changes.GitPoller(
    'https://github.com/u-root/u-root.git',
    workdir='gitpoller-workdir-2', branch='stboot', project='stboot',
    pollInterval=60))
c['change_source'].append(changes.GitPoller(
    'https://github.com/bjoto/stboot-ci.git',
    workdir='gitpoller-workdir-3', branch='master', project='ci',
    pollInterval=60))

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(project=['st', 'stboot', 'ci']),
    treeStableTimer=None,
    builderNames=["img-stboot-mbr-network",
                  "img-stboot-mbr-network-debug",
                  "os-pkg-ubuntu-20"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="img-stboot-mbr-network",
    builderNames=["img-stboot-mbr-network"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="img-stboot-mbr-network-debug",
    builderNames=["img-stboot-mbr-network-debug"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="os-pkg-ubuntu-20",
    builderNames=["os-pkg-ubuntu-20"]))

####### BUILDERS
from buildbot.steps.source.git import Git

def img_stboot_mbr_network_factory():
    f = util.BuildFactory()
    f.addStep(Git(repourl='https://github.com/system-transparency/system-transparency.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='build'))
    f.addStep(Git(repourl='https://github.com/bjoto/stboot-ci.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='ci'))
    f.addStep(steps.ShellCommand(command=["../ci/build-img-stboot-mbr-network"],
                                 workdir='build'))
    return f

def img_stboot_mbr_network_debug_factory():
    f = util.BuildFactory()
    f.addStep(Git(repourl='https://github.com/system-transparency/system-transparency.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='build'))
    f.addStep(Git(repourl='https://github.com/bjoto/stboot-ci.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='ci'))
    f.addStep(steps.ShellCommand(command=["../ci/build-img-stboot-mbr-network-debug"],
                                 workdir='build'))
    return f

def os_pkg_ubuntu_20_factory():
    f = util.BuildFactory()
    f.addStep(Git(repourl='https://github.com/system-transparency/system-transparency.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='build'))
    f.addStep(Git(repourl='https://github.com/bjoto/stboot-ci.git',
                  submodules=True,
                  retry=(5, 2), # 2 retries, 5 secs
                  retryFetch=True,
                  mode='full',
                  method='clean',
                  workdir='ci'))
    f.addStep(steps.ShellCommand(command=["../ci/build-os-pkg-ubuntu-20"],
                                 workdir='build'))
    return f


c['builders'] = []
c['builders'].append(util.BuilderConfig(
    name="img-stboot-mbr-network",
    workernames=["local-worker"],
    factory=img_stboot_mbr_network_factory()))
c['builders'].append(util.BuilderConfig(
    name="img-stboot-mbr-network-debug",
    workernames=["local-worker"],
    factory=img_stboot_mbr_network_debug_factory()))

c['builders'].append(util.BuilderConfig(
    name="os-pkg-ubuntu-20",
    workernames=["local-worker"],
    factory=os_pkg_ubuntu_20_factory()))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Mullvad TCR CI"
#c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://185.213.154.92/"

# minimalistic config to activate new web UI
c['www'] = dict(port="tcp:8010:interface=127.0.0.1",
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {'db_url' : "sqlite:///state.sqlite"}
